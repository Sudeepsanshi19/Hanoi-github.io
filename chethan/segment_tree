
#include <iostream>
#include <vector>
using namespace std;

class SegmentTree {
    vector<int> tree;
    vector<int> arr;
    int n;

public:
    SegmentTree(vector<int> input) {
        n = input.size();
        arr = input;
        tree.resize(4 * n);
        build(0, 0, n - 1); // Build the tree
    }

    void build(int node, int start, int end) {
        if (start == end) {
            tree[node] = arr[start];
            return;
        }

        int mid = start + (end - start) / 2;
        build(2 * node + 1, start, mid); // Left child
        build(2 * node + 2, mid + 1, end); // Right child

        tree[node] = tree[2 * node + 1] + tree[2 * node + 2]; // Merge
    }

    int query(int left, int right) {
        return range(0, 0, n - 1, left, right);
    }

    int range(int node, int start, int end, int left, int right) {
        
        if (end < left || start > right)
            return 0;

        
        if (start >= left && end <= right)
            return tree[node];

       
        int mid = start + (end - start) / 2;
        return range(2 * node + 1, start, mid, left, right) +
               range(2 * node + 2, mid + 1, end, left, right);
    }

    void update(int idx, int val) {
        return updating(0, 0, n - 1, idx, val);
    }

    void updating(int node, int start, int end, int idx, int val) {
        if (idx > end || idx < start)
            return;

        if (start == end) {
            tree[node] = val;
            arr[idx] = val;
            return;
        }

        int mid = start + (end - start) / 2;
        updating(2 * node + 1, start, mid, idx, val);
        updating(2 * node + 2, mid + 1, end, idx, val);

        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];
    }
};

int main() {
    vector<int> arr;
    arr.push_back(3);
    arr.push_back(6);
    arr.push_back(4);
    arr.push_back(25);
    arr.push_back(5);
    arr.push_back(13);
    arr.push_back(19);

    SegmentTree* Tree = new SegmentTree(arr);

    cout << Tree->query(2, 5) << endl;
    Tree->update(2, 10);
    cout << Tree->query(2, 5) << endl;

    return 0;
}
